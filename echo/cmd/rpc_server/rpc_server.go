/*
Command example-gateway-server is an example reverse-proxy implementation
whose HTTP handler is generated by grpc-gateway.
*/
package main

import (
	"context"
	"flag"
	"fmt"
	"net"

	// "github.com/grpc-ecosystem/grpc-gateway/examples/gateway"
	pbecho "github.com/wncbb/grpc_pg/echo/pb"
	"google.golang.org/grpc"
)

var (
	endpoint   = flag.String("endpoint", "localhost:9090", "endpoint of the gRPC service")
	network    = flag.String("network", "tcp", `one of "tcp" or "unix". Must be consistent to -endpoint`)
	swaggerDir = flag.String("swagger_dir", "./pb/", "path to the directory which contains swagger definitions")
)

type EchoServer struct{}

// categorized
func (e *EchoServer) Echo(ctx context.Context, req *pbecho.StringMessage) (*pbecho.StringMessage, error) {
	fmt.Printf("ctx:%#v, req:%#v\n", ctx, req)
	return &pbecho.StringMessage{
		Value: req.Value,
	}, nil
}

func main() {
	flag.Parse()

	echoSvr := &EchoServer{}
	grpcSvr := grpc.NewServer()

	lis, err := net.Listen("tcp", ":9090")
	if err != nil {
		panic(err)
	}

	pbecho.RegisterEchoServiceServer(grpcSvr, echoSvr)

	if err := grpcSvr.Serve(lis); err != nil {
		panic(err)
	}
}
